#include "dvb_utf8.h"
#include "helpers.h"
#include <gtest/gtest.h>
#include <gmock/gmock.h>
#include <string>

using namespace dvb_utf8;

TEST(test_big5, test_big5_decode)
{
    // dvb data stream with encoding identifier token for big5 (0x14).
    auto data = std::vector<uint8_t>{ 0x14,
        0xB4, 0xFA, 0xB8, 0xD5
    };

    auto decoded_text = dvb_utf8::decode(stream_buffer(data));
    EXPECT_FALSE(decoded_text.empty());
}

// there is something strange going on...
#if 0
TEST(test_big5, test_big5_encode_decode)
{
    auto test_bug5_utf8_data = to_utf8_string({
        0x3F, 0x20, 0x3F, 0x20, 0x3F, 0x20, 0x3F, 0x20, 0x3F, 0x20, 0x3F, 0x3F, 0x20, 0x3F, 0x20, 0x3F,
        0x3F, 0x20, 0x3F, 0x3F, 0x20, 0x3F, 0x20, 0x3F, 0x20, 0x3F, 0x3F, 0x20, 0x3F, 0x3F, 0x20, 0x3F,
        0x20, 0x3F, 0x3F, 0x20, 0x3F
    });

    auto encoded_text = dvb_utf8::encode(test_bug5_utf8_str, character_encoding::big5);
    auto decoded_text = dvb_utf8::decode(encoded_text);
    EXPECT_EQ(test_bug5_utf8_str, decoded_text);
}

TEST(test_big5, test_big5_decode2)
{
    // dvb data stream with encoding identifier token for big5 (0x14).
    // source: https://github.com/scheib/chromium/blob/master/chrome/test/data/encoding_tests/alias_mapping/Big5.html
    auto data = std::vector<uint8_t>{ 0x14,
        0xA5, 0x78, 0xA5, 0x5F, 0xAC, 0xDD, 0xA6, 0x75, 0xA9, 0xD2, 0xAC, 0x51, 0xA4, 0xD1, 0xA9, 0xE2,
        0xAC, 0x64, 0xAB, 0x65, 0xC1, 0x60, 0xB2, 0xCE, 0xB3, 0xAF, 0xA4, 0xF4, 0xAB, 0xF3, 0xAA, 0xBA,
        0xA9, 0xD0, 0xAA, 0xD9, 0xA1, 0x41, 0xA4, 0xDE, 0xA8, 0xD3, 0xAB, 0xF3, 0xAA, 0xBA, 0xB1, 0x6A,
        0xAF, 0x50, 0xA4, 0xA3, 0xBA, 0xA1, 0xA1, 0x43, 0xAB, 0xF3, 0xAB, 0xFC, 0xA9, 0xD2, 0xA4, 0xE8,
        0xA7, 0x51, 0xA5, 0xCE, 0xA5, 0x4C, 0xC2, 0xF7, 0xAA, 0xD9, 0xB7, 0x7C, 0xAB, 0xC8, 0xAE, 0xC9,
        0xB9, 0xEF, 0xA5, 0x4C, 0xC2, 0xBD, 0xBD, 0x63, 0xAD, 0xCB, 0xC2, 0x64, 0xA1, 0x41, 0xC3, 0x68,
        0xBA, 0xC3, 0xAC, 0x4F, 0xA8, 0xD3, 0xA8, 0xEB, 0xB1, 0xB4, 0xA5, 0x4C, 0xAA, 0xBA, 0xC1, 0xF4,
        0xA8, 0x70, 0xA1, 0x41, 0xA5, 0x4C, 0xA4, 0x77, 0xB3, 0x7A, 0xB9, 0x4C, 0xAB, 0xDF, 0xAE, 0x76,
        0xA6, 0x56, 0xA5, 0x5F, 0xA9, 0xD2, 0xAA, 0xED, 0xB9, 0x46, 0xA1, 0x75, 0xC4, 0x59, 0xA5, 0xBF,
        0xA7, 0xDC, 0xC4, 0xB3, 0xA1, 0x76, 0xA1, 0x43, 0x0A, 0x0A, 0xA5, 0x78, 0xA5, 0x5F, 0xAC, 0xDD,
        0xA6, 0x75, 0xA9, 0xD2, 0xAC, 0x51, 0xA4, 0xD1, 0xA5, 0xDF, 0xA7, 0x59, 0xBC, 0xE1, 0xB2, 0x4D,
        0xA1, 0x41, 0xA1, 0x75, 0xAC, 0x64, 0xA9, 0xD0, 0xA1, 0x76, 0xAC, 0x4F, 0xA8, 0xD2, 0xA6, 0xE6,
        0xA4, 0xBD, 0xA8, 0xC6, 0xA1, 0x41, 0xA8, 0xC3, 0xA5, 0xBC, 0xA6, 0x62, 0xB3, 0xAF, 0xA4, 0xF4,
        0xAB, 0xF3, 0xA9, 0xD0, 0xA4, 0xBA, 0xA6, 0xB3, 0xA9, 0xD2, 0xBF, 0xD7, 0xAA, 0xBA, 0xA1, 0x75,
        0xC2, 0xBD, 0xBD, 0x63, 0xAD, 0xCB, 0xC2, 0x64, 0xA1, 0x76, 0xA1, 0x46, 0xA9, 0xE2, 0xAC, 0x64,
        0xB5, 0xB2, 0xAA, 0x47, 0xA5, 0xBC, 0xB5, 0x6F, 0xB2, 0x7B, 0xB9, 0x48, 0xB3, 0x57, 0xAA, 0xAB,
        0xAB, 0x7E, 0xA1, 0x41, 0xA4, 0x5D, 0xA5, 0xBC, 0xB1, 0x61, 0xA8, 0xAB, 0xA5, 0xF4, 0xA6, 0xF3,
        0xA4, 0xE5, 0xA5, 0xF3, 0xA1, 0x41, 0xAA, 0xD9, 0xA9, 0xD0, 0xA4, 0xBA, 0xA6, 0xB3, 0xBA, 0xCA,
        0xB5, 0xF8, 0xBE, 0xB9, 0xBF, 0xFD, 0xBC, 0x76, 0xA1, 0x41, 0xA4, 0x40, 0xA4, 0xC1, 0xB3, 0xA3,
        0xA6, 0xB3, 0xAC, 0xF6, 0xBF, 0xFD, 0xA5, 0x69, 0xAC, 0x64, 0xA1, 0x43, 0x0A, 0x0A, 0xA5, 0x5F,
        0xA9, 0xD2, 0xB0, 0xC6, 0xA9, 0xD2, 0xAA, 0xF8, 0xA7, 0xF5, 0xA4, 0x6A, 0xA6, 0xCB, 0xB1, 0x6A,
        0xBD, 0xD5, 0xA1, 0x41, 0xAC, 0xB0, 0xBA, 0xFB, 0xC5, 0x40, 0xA6, 0xAC, 0xAE, 0x65, 0xA4, 0x48,
        0xA6, 0x77, 0xA5, 0xFE, 0xA1, 0x41, 0xA8, 0x43, 0xA4, 0xD1, 0xB3, 0xA3, 0xB7, 0x7C, 0xA4, 0xA3,
        0xA9, 0x77, 0xAE, 0xC9, 0xA1, 0x42, 0xA4, 0xA3, 0xA9, 0x77, 0xC2, 0x49, 0xA9, 0xE2, 0xAC, 0x64,
        0xAA, 0xD9, 0xA9, 0xD0, 0xA1, 0x41, 0xAC, 0x51, 0xA4, 0xD1, 0xA4, 0x55, 0xA4, 0xC8, 0xA9, 0xE2,
        0xAC, 0x64, 0xB3, 0xAF, 0xAB, 0x65, 0xC1, 0x60, 0xB2, 0xCE, 0xAA, 0xD9, 0xA9, 0xD0, 0xAE, 0xC9,
        0xA1, 0x41, 0xA6, 0x5D, 0xB3, 0xAF, 0xA4, 0xF4, 0xAB, 0xF3, 0xA5, 0xBF, 0xBB, 0x50, 0xA5, 0xDF,
        0xA9, 0x65, 0xD2, 0x5C, 0xBF, 0xF4, 0xAD, 0xF5, 0xAF, 0x53, 0xA7, 0x4F, 0xB1, 0xB5, 0xA8, 0xA3,
        0xA1, 0x41, 0xB1, 0xB5, 0xB5, 0xDB, 0xB0, 0xA8, 0xA4, 0x57, 0xA4, 0x53, 0xAC, 0x4F, 0xAB, 0xDF,
        0xAE, 0x76, 0xB7, 0x7C, 0xA8, 0xA3, 0xA1, 0x41, 0xA4, 0x40, 0xAE, 0xC9, 0xA8, 0xD3, 0xA4, 0xA3,
        0xA4, 0xCE, 0xA7, 0x69, 0xAA, 0xBE, 0xB3, 0xAF, 0xA4, 0xF4, 0xAB, 0xF3, 0xA9, 0xE2, 0xAC, 0x64,
        0xAA, 0xBA, 0xA8, 0xC6, 0xA1, 0x43, 0x0A, 0x0A, 0xAB, 0xDF, 0xAE, 0x76, 0xBE, 0x47, 0xA4, 0xE5,
        0xC0, 0x73, 0xAB, 0x68, 0xBB, 0xA1, 0xA1, 0x41, 0xB3, 0xAF, 0xA4, 0xF4, 0xAB, 0xF3, 0xA7, 0xDC,
        0xC4, 0xB3, 0xA1, 0x75, 0xAC, 0x64, 0xA9, 0xD0, 0xA1, 0x76, 0xAB, 0x49, 0xA5, 0xC7, 0xC1, 0xF4,
        0xA8, 0x70, 0xA1, 0x41, 0xBE, 0xE1, 0xA4, 0xDF, 0xA7, 0xDC, 0xC5, 0x47, 0xA4, 0xE5, 0xAE, 0xD1,
        0xB7, 0x7C, 0xC3, 0x6E, 0xA5, 0xFA, 0xA9, 0xCE, 0xA5, 0xA2, 0xC2, 0xDC, 0xA1, 0x41, 0xAC, 0x51,
        0xA4, 0xD1, 0xA5, 0x4C, 0xA6, 0x5D, 0xA6, 0xB9, 0xA4, 0xA3, 0xB4, 0xB1, 0xA7, 0xE2, 0xAE, 0xD1,
        0xAD, 0xB1, 0xA7, 0xF0, 0xA8, 0xBE, 0xB8, 0xEA, 0xAE, 0xC6, 0xA5, 0xE6, 0xB5, 0xB9, 0xAB, 0xF3,
        0xA1, 0x41, 0xC1, 0xD7, 0xA7, 0x4B, 0xA4, 0xBA, 0xAE, 0x65, 0xC3, 0x6E, 0xA5, 0xFA, 0xA1, 0x46,
        0xA5, 0x4C, 0xA8, 0xC3, 0xAB, 0xD8, 0xC4, 0xB3, 0xAA, 0xFC, 0xAB, 0xF3, 0xA4, 0x51, 0xA4, 0x45,
        0xA4, 0xE9, 0xA5, 0x58, 0xAE, 0x78, 0xAE, 0xC9, 0xC0, 0xB9, 0xA4, 0x57, 0xA4, 0x66, 0xB8, 0x6E,
        0xA1, 0x41, 0xAA, 0xED, 0xB9, 0x46, 0xA1, 0x75, 0xA8, 0x49, 0xC0, 0x71, 0xA7, 0xDC, 0xC4, 0xB3,
        0xA1, 0x76, 0xA1, 0x41, 0xAA, 0xFC, 0xAB, 0xF3, 0xAA, 0xED, 0xA5, 0xDC, 0xB7, 0x7C, 0xA6, 0xD2,
        0xBC, 0x7B, 0xA1, 0x43
    };

    auto decoded_text = dvb_utf8::decode(stream_buffer(data));

    auto utf8_data = to_utf8_string({
        0xE5, 0x8F, 0xB0, 0xE5, 0x8C, 0x97, 0xE7, 0x9C, 0x8B, 0xE5, 0xAE, 0x88, 0xE6, 0x89, 0x80, 0xE6,
        0x98, 0xA8, 0xE5, 0xA4, 0xA9, 0xE6, 0x8A, 0xBD, 0xE6, 0x9F, 0xA5, 0xE5, 0x89, 0x8D, 0xE7, 0xB8,
        0xBD, 0xE7, 0xB5, 0xB1, 0xE9, 0x99, 0xB3, 0xE6, 0xB0, 0xB4, 0xE6, 0x89, 0x81, 0xE7, 0x9A, 0x84,
        0xE6, 0x88, 0xBF, 0xE8, 0x88, 0x8D, 0xEF, 0xBC, 0x8C, 0xE5, 0xBC, 0x95, 0xE4, 0xBE, 0x86, 0xE6,
        0x89, 0x81, 0xE7, 0x9A, 0x84, 0xE5, 0xBC, 0xB7, 0xE7, 0x83, 0x88, 0xE4, 0xB8, 0x8D, 0xE6, 0xBB,
        0xBF, 0xE3, 0x80, 0x82, 0xE6, 0x89, 0x81, 0xE6, 0x8C, 0x87, 0xE6, 0x89, 0x80, 0xE6, 0x96, 0xB9,
        0xE5, 0x88, 0xA9, 0xE7, 0x94, 0xA8, 0xE4, 0xBB, 0x96, 0xE9, 0x9B, 0xA2, 0xE8, 0x88, 0x8D, 0xE6,
        0x9C, 0x83, 0xE5, 0xAE, 0xA2, 0xE6, 0x99, 0x82, 0xE5, 0xB0, 0x8D, 0xE4, 0xBB, 0x96, 0xE7, 0xBF,
        0xBB, 0xE7, 0xAE, 0xB1, 0xE5, 0x80, 0x92, 0xE6, 0xAB, 0x83, 0xEF, 0xBC, 0x8C, 0xE6, 0x87, 0xB7,
        0xE7, 0x96, 0x91, 0xE6, 0x98, 0xAF, 0xE4, 0xBE, 0x86, 0xE5, 0x88, 0xBA, 0xE6, 0x8E, 0xA2, 0xE4,
        0xBB, 0x96, 0xE7, 0x9A, 0x84, 0xE9, 0x9A, 0xB1, 0xE7, 0xA7, 0x81, 0xEF, 0xBC, 0x8C, 0xE4, 0xBB,
        0x96, 0xE5, 0xB7, 0xB2, 0xE9, 0x80, 0x8F, 0xE9, 0x81, 0x8E, 0xE5, 0xBE, 0x8B, 0xE5, 0xB8, 0xAB,
        0xE5, 0x90, 0x91, 0xE5, 0x8C, 0x97, 0xE6, 0x89, 0x80, 0xE8, 0xA1, 0xA8, 0xE9, 0x81, 0x94, 0xE3,
        0x80, 0x8C, 0xE5, 0x9A, 0xB4, 0xE6, 0xAD, 0xA3, 0xE6, 0x8A, 0x97, 0xE8, 0xAD, 0xB0, 0xE3, 0x80,
        0x8D, 0xE3, 0x80, 0x82, 0x20, 0xE5, 0x8F, 0xB0, 0xE5, 0x8C, 0x97, 0xE7, 0x9C, 0x8B, 0xE5, 0xAE,
        0x88, 0xE6, 0x89, 0x80, 0xE6, 0x98, 0xA8, 0xE5, 0xA4, 0xA9, 0xE7, 0xAB, 0x8B, 0xE5, 0x8D, 0xB3,
        0xE6, 0xBE, 0x84, 0xE6, 0xB8, 0x85, 0xEF, 0xBC, 0x8C, 0xE3, 0x80, 0x8C, 0xE6, 0x9F, 0xA5, 0xE6,
        0x88, 0xBF, 0xE3, 0x80, 0x8D, 0xE6, 0x98, 0xAF, 0xE4, 0xBE, 0x8B, 0xE8, 0xA1, 0x8C, 0xE5, 0x85,
        0xAC, 0xE4, 0xBA, 0x8B, 0xEF, 0xBC, 0x8C, 0xE4, 0xB8, 0xA6, 0xE6, 0x9C, 0xAA, 0xE5, 0x9C, 0xA8,
        0xE9, 0x99, 0xB3, 0xE6, 0xB0, 0xB4, 0xE6, 0x89, 0x81, 0xE6, 0x88, 0xBF, 0xE5, 0x85, 0xA7, 0xE6,
        0x9C, 0x89, 0xE6, 0x89, 0x80, 0xE8, 0xAC, 0x82, 0xE7, 0x9A, 0x84, 0xE3, 0x80, 0x8C, 0xE7, 0xBF,
        0xBB, 0xE7, 0xAE, 0xB1, 0xE5, 0x80, 0x92, 0xE6, 0xAB, 0x83, 0xE3, 0x80, 0x8D, 0xEF, 0xBC, 0x9B,
        0xE6, 0x8A, 0xBD, 0xE6, 0x9F, 0xA5, 0xE7, 0xB5, 0x90, 0xE6, 0x9E, 0x9C, 0xE6, 0x9C, 0xAA, 0xE7,
        0x99, 0xBC, 0xE7, 0x8F, 0xBE, 0xE9, 0x81, 0x95, 0xE8, 0xA6, 0x8F, 0xE7, 0x89, 0xA9, 0xE5, 0x93,
        0x81, 0xEF, 0xBC, 0x8C, 0xE4, 0xB9, 0x9F, 0xE6, 0x9C, 0xAA, 0xE5, 0xB8, 0xB6, 0xE8, 0xB5, 0xB0,
        0xE4, 0xBB, 0xBB, 0xE4, 0xBD, 0x95, 0xE6, 0x96, 0x87, 0xE4, 0xBB, 0xB6, 0xEF, 0xBC, 0x8C, 0xE8,
        0x88, 0x8D, 0xE6, 0x88, 0xBF, 0xE5, 0x85, 0xA7, 0xE6, 0x9C, 0x89, 0xE7, 0x9B, 0xA3, 0xE8, 0xA6,
        0x96, 0xE5, 0x99, 0xA8, 0xE9, 0x8C, 0x84, 0xE5, 0xBD, 0xB1, 0xEF, 0xBC, 0x8C, 0xE4, 0xB8, 0x80,
        0xE5, 0x88, 0x87, 0xE9, 0x83, 0xBD, 0xE6, 0x9C, 0x89, 0xE7, 0xB4, 0x80, 0xE9, 0x8C, 0x84, 0xE5,
        0x8F, 0xAF, 0xE6, 0x9F, 0xA5, 0xE3, 0x80, 0x82, 0x20, 0xE5, 0x8C, 0x97, 0xE6, 0x89, 0x80, 0xE5,
        0x89, 0xAF, 0xE6, 0x89, 0x80, 0xE9, 0x95, 0xB7, 0xE6, 0x9D, 0x8E, 0xE5, 0xA4, 0xA7, 0xE7, 0xAB,
        0xB9, 0xE5, 0xBC, 0xB7, 0xE8, 0xAA, 0xBF, 0xEF, 0xBC, 0x8C, 0xE7, 0x82, 0xBA, 0xE7, 0xB6, 0xAD,
        0xE8, 0xAD, 0xB7, 0xE6, 0x94, 0xB6, 0xE5, 0xAE, 0xB9, 0xE4, 0xBA, 0xBA, 0xE5, 0xAE, 0x89, 0xE5,
        0x85, 0xA8, 0xEF, 0xBC, 0x8C, 0xE6, 0xAF, 0x8F, 0xE5, 0xA4, 0xA9, 0xE9, 0x83, 0xBD, 0xE6, 0x9C,
        0x83, 0xE4, 0xB8, 0x8D, 0xE5, 0xAE, 0x9A, 0xE6, 0x99, 0x82, 0xE3, 0x80, 0x81, 0xE4, 0xB8, 0x8D,
        0xE5, 0xAE, 0x9A, 0xE9, 0xBB, 0x9E, 0xE6, 0x8A, 0xBD, 0xE6, 0x9F, 0xA5, 0xE8, 0x88, 0x8D, 0xE6,
        0x88, 0xBF, 0xEF, 0xBC, 0x8C, 0xE6, 0x98, 0xA8, 0xE5, 0xA4, 0xA9, 0xE4, 0xB8, 0x8B, 0xE5, 0x8D,
        0x88, 0xE6, 0x8A, 0xBD, 0xE6, 0x9F, 0xA5, 0xE9, 0x99, 0xB3, 0xE5, 0x89, 0x8D, 0xE7, 0xB8, 0xBD,
        0xE7, 0xB5, 0xB1, 0xE8, 0x88, 0x8D, 0xE6, 0x88, 0xBF, 0xE6, 0x99, 0x82, 0xEF, 0xBC, 0x8C, 0xE5,
        0x9B, 0xA0, 0xE9, 0x99, 0xB3, 0xE6, 0xB0, 0xB4, 0xE6, 0x89, 0x81, 0xE6, 0xAD, 0xA3, 0xE8, 0x88,
        0x87, 0xE7, 0xAB, 0x8B, 0xE5, 0xA7, 0x94, 0xE6, 0xB6, 0x82, 0xE9, 0x86, 0x92, 0xE5, 0x93, 0xB2,
        0xE7, 0x89, 0xB9, 0xE5, 0x88, 0xA5, 0xE6, 0x8E, 0xA5, 0xE8, 0xA6, 0x8B, 0xEF, 0xBC, 0x8C, 0xE6,
        0x8E, 0xA5, 0xE8, 0x91, 0x97, 0xE9, 0xA6, 0xAC, 0xE4, 0xB8, 0x8A, 0xE5, 0x8F, 0x88, 0xE6, 0x98,
        0xAF, 0xE5, 0xBE, 0x8B, 0xE5, 0xB8, 0xAB, 0xE6, 0x9C, 0x83, 0xE8, 0xA6, 0x8B, 0xEF, 0xBC, 0x8C,
        0xE4, 0xB8, 0x80, 0xE6, 0x99, 0x82, 0xE4, 0xBE, 0x86, 0xE4, 0xB8, 0x8D, 0xE5, 0x8F, 0x8A, 0xE5,
        0x91, 0x8A, 0xE7, 0x9F, 0xA5, 0xE9, 0x99, 0xB3, 0xE6, 0xB0, 0xB4, 0xE6, 0x89, 0x81, 0xE6, 0x8A,
        0xBD, 0xE6, 0x9F, 0xA5, 0xE7, 0x9A, 0x84, 0xE4, 0xBA, 0x8B, 0xE3, 0x80, 0x82, 0x20, 0xE5, 0xBE,
        0x8B, 0xE5, 0xB8, 0xAB, 0xE9, 0x84, 0xAD, 0xE6, 0x96, 0x87, 0xE9, 0xBE, 0x8D, 0xE5, 0x89, 0x87,
        0xE8, 0xAA, 0xAA, 0xEF, 0xBC, 0x8C, 0xE9, 0x99, 0xB3, 0xE6, 0xB0, 0xB4, 0xE6, 0x89, 0x81, 0xE6,
        0x8A, 0x97, 0xE8, 0xAD, 0xB0, 0xE3, 0x80, 0x8C, 0xE6, 0x9F, 0xA5, 0xE6, 0x88, 0xBF, 0xE3, 0x80,
        0x8D, 0xE4, 0xBE, 0xB5, 0xE7, 0x8A, 0xAF, 0xE9, 0x9A, 0xB1, 0xE7, 0xA7, 0x81, 0xEF, 0xBC, 0x8C,
        0xE6, 0x93, 0x94, 0xE5, 0xBF, 0x83, 0xE6, 0x8A, 0x97, 0xE8, 0xBE, 0xAF, 0xE6, 0x96, 0x87, 0xE6,
        0x9B, 0xB8, 0xE6, 0x9C, 0x83, 0xE6, 0x9B, 0x9D, 0xE5, 0x85, 0x89, 0xE6, 0x88, 0x96, 0xE5, 0xA4,
        0xB1, 0xE8, 0xB9, 0xA4, 0xEF, 0xBC, 0x8C, 0xE6, 0x98, 0xA8, 0xE5, 0xA4, 0xA9, 0xE4, 0xBB, 0x96,
        0xE5, 0x9B, 0xA0, 0xE6, 0xAD, 0xA4, 0xE4, 0xB8, 0x8D, 0xE6, 0x95, 0xA2, 0xE6, 0x8A, 0x8A, 0xE6,
        0x9B, 0xB8, 0xE9, 0x9D, 0xA2, 0xE6, 0x94, 0xBB, 0xE9, 0x98, 0xB2, 0xE8, 0xB3, 0x87, 0xE6, 0x96,
        0x99, 0xE4, 0xBA, 0xA4, 0xE7, 0xB5, 0xA6, 0xE6, 0x89, 0x81, 0xEF, 0xBC, 0x8C, 0xE9, 0x81, 0xBF,
        0xE5, 0x85, 0x8D, 0xE5, 0x85, 0xA7, 0xE5, 0xAE, 0xB9, 0xE6, 0x9B, 0x9D, 0xE5, 0x85, 0x89, 0xEF,
        0xBC, 0x9B, 0xE4, 0xBB, 0x96, 0xE4, 0xB8, 0xA6, 0xE5, 0xBB, 0xBA, 0xE8, 0xAD, 0xB0, 0xE9, 0x98,
        0xBF, 0xE6, 0x89, 0x81, 0xE5, 0x8D, 0x81, 0xE4, 0xB9, 0x9D, 0xE6, 0x97, 0xA5, 0xE5, 0x87, 0xBA,
        0xE5, 0xBA, 0xAD, 0xE6, 0x99, 0x82, 0xE6, 0x88, 0xB4, 0xE4, 0xB8, 0x8A, 0xE5, 0x8F, 0xA3, 0xE7,
        0xBD, 0xA9, 0xEF, 0xBC, 0x8C, 0xE8, 0xA1, 0xA8, 0xE9, 0x81, 0x94, 0xE3, 0x80, 0x8C, 0xE6, 0xB2,
        0x89, 0xE9, 0xBB, 0x98, 0xE6, 0x8A, 0x97, 0xE8, 0xAD, 0xB0, 0xE3, 0x80, 0x8D, 0xEF, 0xBC, 0x8C,
        0xE9, 0x98, 0xBF, 0xE6, 0x89, 0x81, 0xE8, 0xA1, 0xA8, 0xE7, 0xA4, 0xBA, 0xE6, 0x9C, 0x83, 0xE8,
        0x80, 0x83, 0xE6, 0x85, 0xAE, 0xE3, 0x80, 0x82
    });

    EXPECT_EQ(utf8_data, decoded_text);
}


#endif