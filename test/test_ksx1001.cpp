#include "dvb_utf8.hpp"
#include "helpers.hpp"
#include <gtest/gtest.h>
#include <gmock/gmock.h>
#include <string>

using namespace dvb_utf8;

TEST(test_ksx1001, test_ksx1001_decode)
{
    // dvb data stream with encoding identifier token for ksx1001 (0x12).
    auto data = std::vector<uint8_t>{ 0x12,
        0xC7, 0xD1, 0xB3, 0xAA, 0xB6, 0xF3, 0xB4, 0xE7, 0xC0, 0xBA, 0x20, 0x32, 0xBF, 0xF9, 0x20, 0xC0,
        0xD3, 0xBD, 0xC3, 0xB1, 0xB9, 0xC8, 0xB8, 0xBF, 0xA1, 0xBC, 0xAD, 0x20, 0xB1, 0xB9, 0xC8, 0xB8,
        0x20, 0xB3, 0xBB, 0x20, 0xC6, 0xF8, 0xB7, 0xC2, 0xC7, 0xE0, 0xBB, 0xE7, 0x20, 0xB9, 0xE6, 0xC1,
        0xF6, 0xB8, 0xA6, 0x20, 0xC0, 0xA7, 0xC7, 0xD1, 0x20, 0x27, 0xB1, 0xB9, 0xC8, 0xB8, 0x20, 0xC6,
        0xF8, 0xB7, 0xC2, 0xB9, 0xE6, 0xC1, 0xF6, 0xB9, 0xFD, 0x27, 0x20, 0xC1, 0xA6, 0xC1, 0xA4, 0xB5,
        0xB5, 0x20, 0xC3, 0xDF, 0xC1, 0xF8, 0xC7, 0xCF, 0xB1, 0xE2, 0xB7, 0xCE, 0x20, 0xC7, 0xDF, 0xB4,
        0xD9, 0x2E, 0x20, 0x0A, 0x0A, 0xB9, 0xCE, 0xC1, 0xD6, 0xB4, 0xE7, 0xC0, 0xBA, 0x20, 0xB1, 0xD7,
        0xB7, 0xAF, 0xB3, 0xAA, 0x20, 0x22, 0xC7, 0xD1, 0xB3, 0xAA, 0xB6, 0xF3, 0xB4, 0xE7, 0xC0, 0xCC,
        0x20, 0xC8, 0xFB, 0xC0, 0xBB, 0x20, 0xBE, 0xD5, 0xBC, 0xBC, 0xBF, 0xF6, 0x20, 0x27, 0x4D, 0x42,
        0xBE, 0xC7, 0xB9, 0xFD, 0x27, 0xC0, 0xBB, 0x20, 0xB0, 0xAD, 0xC7, 0xE0, 0x20, 0xC3, 0xB3, 0xB8,
        0xAE, 0xC7, 0xCF, 0xB7, 0xC1, 0xB0, 0xED, 0x20, 0xC7, 0xD8, 0xBC, 0xAD, 0x20, 0xB1, 0xD8, 0xC7,
        0xD1, 0x20, 0xB4, 0xEB, 0xC4, 0xA1, 0x20, 0xBB, 0xF3, 0xC5, 0xC2, 0xB0, 0xA1, 0x20, 0xB9, 0xDF,
        0xB4, 0xDC, 0xB5, 0xC8, 0x20, 0xB0, 0xCD, 0xC0, 0xBA, 0x20, 0xB0, 0xC5, 0xB7, 0xD0, 0xC7, 0xCF,
        0xC1, 0xF6, 0x20, 0xBE, 0xCA, 0xC0, 0xBA, 0x20, 0xC3, 0xA4, 0x20, 0xBE, 0xDF, 0xB4, 0xE7, 0xC0,
        0xCC, 0x20, 0xC6, 0xF8, 0xB7, 0xC2, 0xC1, 0xA4, 0xB4, 0xE7, 0xC0, 0xCE, 0x20, 0xBE, 0xE7, 0x20,
        0xB1, 0xB9, 0xB9, 0xCE, 0xC0, 0xBB, 0x20, 0xC8, 0xA3, 0xB5, 0xB5, 0xC7, 0xCF, 0xB0, 0xED, 0x20,
        0xC0, 0xD6, 0xB4, 0xD9, 0x22, 0xB8, 0xE7, 0x20, 0xB9, 0xDD, 0xB9, 0xDF, 0xC7, 0xDF, 0xB4, 0xD9,
        0x2E, 0x20, 0x0A, 0x0A, 0xC0, 0xD3, 0xC3, 0xA4, 0xC1, 0xF8, 0x20, 0xB0, 0xCB, 0xC2, 0xFB, 0xC3,
        0xD1, 0xC0, 0xE5, 0xC0, 0xBA, 0x20, 0xC0, 0xCC, 0xB3, 0xAF, 0x20, 0x22, 0xB1, 0xB9, 0xC8, 0xB8,
        0x20, 0xC6, 0xF8, 0xB7, 0xC2, 0xBB, 0xE7, 0xC5, 0xC2, 0xBF, 0xCD, 0x20, 0xB0, 0xFC, 0xB7, 0xC3,
        0xB5, 0xC8, 0x20, 0xB0, 0xED, 0xBC, 0xD2, 0xA1, 0xA4, 0xB0, 0xED, 0xB9, 0xDF, 0x20, 0xBB, 0xE7,
        0xB0, 0xC7, 0x20, 0x31, 0x31, 0xB0, 0xC7, 0xC0, 0xBB, 0x20, 0xBD, 0xC5, 0xBC, 0xD3, 0xC7, 0xCF,
        0xB0, 0xED, 0x20, 0xB0, 0xF8, 0xC1, 0xA4, 0xC7, 0xCF, 0xB0, 0xD4, 0x20, 0xC3, 0xB6, 0xC0, 0xFA,
        0xC8, 0xF7, 0x20, 0xBC, 0xF6, 0xBB, 0xE7, 0xC7, 0xCF, 0xB6, 0xF3, 0x22, 0xB0, 0xED, 0x20, 0xC1,
        0xF6, 0xBD, 0xC3, 0xC7, 0xDF, 0xB4, 0xD9, 0x2E, 0x20, 0xC0, 0xD3, 0x20, 0xC3, 0xD1, 0xC0, 0xE5,
        0xC0, 0xBA, 0x20, 0x22, 0xB1, 0xB9, 0xC8, 0xB8, 0x20, 0xC0, 0xDA, 0xC0, 0xB2, 0xB1, 0xC7, 0xC0,
        0xBA, 0x20, 0xC3, 0xD6, 0xB4, 0xEB, 0xC7, 0xD1, 0x20, 0xC1, 0xB8, 0xC1, 0xDF, 0xB5, 0xC5, 0xBE,
        0xDF, 0x20, 0xC7, 0xCF, 0xC1, 0xF6, 0xB8, 0xB8, 0x2C, 0x20, 0xB0, 0xED, 0xBC, 0xD2, 0xA1, 0xA4,
        0xB0, 0xED, 0xB9, 0xDF, 0xC0, 0xCC, 0x20, 0xC0, 0xD6, 0xB4, 0xC2, 0x20, 0xB8, 0xB8, 0xC5, 0xAD,
        0x20, 0xBC, 0xD2, 0xBC, 0xD3, 0x20, 0xC1, 0xA4, 0xB4, 0xE7, 0xC0, 0xCC, 0xB3, 0xAA, 0x20, 0xC1,
        0xF6, 0xC0, 0xA7, 0x20, 0xB0, 0xED, 0xC7, 0xCF, 0xB8, 0xA6, 0x20, 0xB8, 0xB7, 0xB7, 0xD0, 0xC7,
        0xCF, 0xB0, 0xED, 0x20, 0xB9, 0xFD, 0xB0, 0xFA, 0x20, 0xBF, 0xF8, 0xC4, 0xA2, 0xBF, 0xA1, 0x20,
        0xB5, 0xFB, 0xB6, 0xF3, 0x20, 0xC3, 0xB3, 0xB8, 0xAE, 0xC7, 0xCF, 0xB6, 0xF3, 0x22, 0xB0, 0xED,
        0x20, 0xB8, 0xBB, 0xC7, 0xDF, 0xB4, 0xD9, 0x2E, 0x20, 0xC7, 0xD1, 0xC6, 0xED, 0x20, 0xB0, 0xE6,
        0xC2, 0xFB, 0xC0, 0xBA, 0x20, 0xB0, 0xAD, 0xB1, 0xE2, 0xB0, 0xA9, 0x20, 0xB9, 0xCE, 0xB3, 0xEB,
        0xB4, 0xE7, 0x20, 0xB4, 0xEB, 0xC7, 0xA5, 0xBF, 0xA1, 0xB0, 0xD4, 0x20, 0x31, 0x32, 0xC0, 0xCF,
        0x2C, 0x20, 0xB9, 0xCE, 0xC1, 0xD6, 0xB4, 0xE7, 0x20, 0xB9, 0xAE, 0xC7, 0xD0, 0xC1, 0xF8, 0x2C,
        0x20, 0xB9, 0xCE, 0xB3, 0xEB, 0xB4, 0xE7, 0x20, 0xC0, 0xCC, 0xC1, 0xA4, 0xC8, 0xF1, 0x20, 0xC0,
        0xC7, 0xBF, 0xF8, 0xBF, 0xA1, 0xB0, 0xD4, 0xB4, 0xC2, 0x20, 0x31, 0x33, 0xC0, 0xCF, 0x20, 0xB0,
        0xE6, 0xC2, 0xFB, 0xBF, 0xA1, 0x20, 0xC3, 0xE2, 0xBC, 0xAE, 0xC7, 0xCF, 0xB6, 0xF3, 0xB4, 0xC2,
        0x20, 0xB0, 0xF8, 0xB9, 0xAE, 0xC0, 0xBB, 0x20, 0xB0, 0xA2, 0xB0, 0xA2, 0x20, 0xB9, 0xDF, 0xBC,
        0xDB, 0xC7, 0xDF, 0xB4, 0xD9, 0x2E
    };

    auto decoded_text = dvb_utf8::decode(stream_span(&data[0], &data.data()[data.size()]));

    auto utf8_data = to_utf8_string({
        0xED, 0x95, 0x9C, 0xEB, 0x82, 0x98, 0xEB, 0x9D, 0xBC, 0xEB, 0x8B, 0xB9, 0xEC, 0x9D, 0x80, 0x20,
        0x32, 0xEC, 0x9B, 0x94, 0x20, 0xEC, 0x9E, 0x84, 0xEC, 0x8B, 0x9C, 0xEA, 0xB5, 0xAD, 0xED, 0x9A,
        0x8C, 0xEC, 0x97, 0x90, 0xEC, 0x84, 0x9C, 0x20, 0xEA, 0xB5, 0xAD, 0xED, 0x9A, 0x8C, 0x20, 0xEB,
        0x82, 0xB4, 0x20, 0xED, 0x8F, 0xAD, 0xEB, 0xA0, 0xA5, 0xED, 0x96, 0x89, 0xEC, 0x82, 0xAC, 0x20,
        0xEB, 0xB0, 0xA9, 0xEC, 0xA7, 0x80, 0xEB, 0xA5, 0xBC, 0x20, 0xEC, 0x9C, 0x84, 0xED, 0x95, 0x9C,
        0x20, 0x27, 0xEA, 0xB5, 0xAD, 0xED, 0x9A, 0x8C, 0x20, 0xED, 0x8F, 0xAD, 0xEB, 0xA0, 0xA5, 0xEB,
        0xB0, 0xA9, 0xEC, 0xA7, 0x80, 0xEB, 0xB2, 0x95, 0x27, 0x20, 0xEC, 0xA0, 0x9C, 0xEC, 0xA0, 0x95,
        0xEB, 0x8F, 0x84, 0x20, 0xEC, 0xB6, 0x94, 0xEC, 0xA7, 0x84, 0xED, 0x95, 0x98, 0xEA, 0xB8, 0xB0,
        0xEB, 0xA1, 0x9C, 0x20, 0xED, 0x96, 0x88, 0xEB, 0x8B, 0xA4, 0x2E, 0x20, 0xEB, 0xAF, 0xBC, 0xEC,
        0xA3, 0xBC, 0xEB, 0x8B, 0xB9, 0xEC, 0x9D, 0x80, 0x20, 0xEA, 0xB7, 0xB8, 0xEB, 0x9F, 0xAC, 0xEB,
        0x82, 0x98, 0x20, 0x22, 0xED, 0x95, 0x9C, 0xEB, 0x82, 0x98, 0xEB, 0x9D, 0xBC, 0xEB, 0x8B, 0xB9,
        0xEC, 0x9D, 0xB4, 0x20, 0xED, 0x9E, 0x98, 0xEC, 0x9D, 0x84, 0x20, 0xEC, 0x95, 0x9E, 0xEC, 0x84,
        0xB8, 0xEC, 0x9B, 0x8C, 0x20, 0x27, 0x4D, 0x42, 0xEC, 0x95, 0x85, 0xEB, 0xB2, 0x95, 0x27, 0xEC,
        0x9D, 0x84, 0x20, 0xEA, 0xB0, 0x95, 0xED, 0x96, 0x89, 0x20, 0xEC, 0xB2, 0x98, 0xEB, 0xA6, 0xAC,
        0xED, 0x95, 0x98, 0xEB, 0xA0, 0xA4, 0xEA, 0xB3, 0xA0, 0x20, 0xED, 0x95, 0xB4, 0xEC, 0x84, 0x9C,
        0x20, 0xEA, 0xB7, 0xB9, 0xED, 0x95, 0x9C, 0x20, 0xEB, 0x8C, 0x80, 0xEC, 0xB9, 0x98, 0x20, 0xEC,
        0x83, 0x81, 0xED, 0x83, 0x9C, 0xEA, 0xB0, 0x80, 0x20, 0xEB, 0xB0, 0x9C, 0xEB, 0x8B, 0xA8, 0xEB,
        0x90, 0x9C, 0x20, 0xEA, 0xB2, 0x83, 0xEC, 0x9D, 0x80, 0x20, 0xEA, 0xB1, 0xB0, 0xEB, 0xA1, 0xA0,
        0xED, 0x95, 0x98, 0xEC, 0xA7, 0x80, 0x20, 0xEC, 0x95, 0x8A, 0xEC, 0x9D, 0x80, 0x20, 0xEC, 0xB1,
        0x84, 0x20, 0xEC, 0x95, 0xBC, 0xEB, 0x8B, 0xB9, 0xEC, 0x9D, 0xB4, 0x20, 0xED, 0x8F, 0xAD, 0xEB,
        0xA0, 0xA5, 0xEC, 0xA0, 0x95, 0xEB, 0x8B, 0xB9, 0xEC, 0x9D, 0xB8, 0x20, 0xEC, 0x96, 0x91, 0x20,
        0xEA, 0xB5, 0xAD, 0xEB, 0xAF, 0xBC, 0xEC, 0x9D, 0x84, 0x20, 0xED, 0x98, 0xB8, 0xEB, 0x8F, 0x84,
        0xED, 0x95, 0x98, 0xEA, 0xB3, 0xA0, 0x20, 0xEC, 0x9E, 0x88, 0xEB, 0x8B, 0xA4, 0x22, 0xEB, 0xA9,
        0xB0, 0x20, 0xEB, 0xB0, 0x98, 0xEB, 0xB0, 0x9C, 0xED, 0x96, 0x88, 0xEB, 0x8B, 0xA4, 0x2E, 0x20,
        0xEC, 0x9E, 0x84, 0xEC, 0xB1, 0x84, 0xEC, 0xA7, 0x84, 0x20, 0xEA, 0xB2, 0x80, 0xEC, 0xB0, 0xB0,
        0xEC, 0xB4, 0x9D, 0xEC, 0x9E, 0xA5, 0xEC, 0x9D, 0x80, 0x20, 0xEC, 0x9D, 0xB4, 0xEB, 0x82, 0xA0,
        0x20, 0x22, 0xEA, 0xB5, 0xAD, 0xED, 0x9A, 0x8C, 0x20, 0xED, 0x8F, 0xAD, 0xEB, 0xA0, 0xA5, 0xEC,
        0x82, 0xAC, 0xED, 0x83, 0x9C, 0xEC, 0x99, 0x80, 0x20, 0xEA, 0xB4, 0x80, 0xEB, 0xA0, 0xA8, 0xEB,
        0x90, 0x9C, 0x20, 0xEA, 0xB3, 0xA0, 0xEC, 0x86, 0x8C, 0xC2, 0xB7, 0xEA, 0xB3, 0xA0, 0xEB, 0xB0,
        0x9C, 0x20, 0xEC, 0x82, 0xAC, 0xEA, 0xB1, 0xB4, 0x20, 0x31, 0x31, 0xEA, 0xB1, 0xB4, 0xEC, 0x9D,
        0x84, 0x20, 0xEC, 0x8B, 0xA0, 0xEC, 0x86, 0x8D, 0xED, 0x95, 0x98, 0xEA, 0xB3, 0xA0, 0x20, 0xEA,
        0xB3, 0xB5, 0xEC, 0xA0, 0x95, 0xED, 0x95, 0x98, 0xEA, 0xB2, 0x8C, 0x20, 0xEC, 0xB2, 0xA0, 0xEC,
        0xA0, 0x80, 0xED, 0x9E, 0x88, 0x20, 0xEC, 0x88, 0x98, 0xEC, 0x82, 0xAC, 0xED, 0x95, 0x98, 0xEB,
        0x9D, 0xBC, 0x22, 0xEA, 0xB3, 0xA0, 0x20, 0xEC, 0xA7, 0x80, 0xEC, 0x8B, 0x9C, 0xED, 0x96, 0x88,
        0xEB, 0x8B, 0xA4, 0x2E, 0x20, 0xEC, 0x9E, 0x84, 0x20, 0xEC, 0xB4, 0x9D, 0xEC, 0x9E, 0xA5, 0xEC,
        0x9D, 0x80, 0x20, 0x22, 0xEA, 0xB5, 0xAD, 0xED, 0x9A, 0x8C, 0x20, 0xEC, 0x9E, 0x90, 0xEC, 0x9C,
        0xA8, 0xEA, 0xB6, 0x8C, 0xEC, 0x9D, 0x80, 0x20, 0xEC, 0xB5, 0x9C, 0xEB, 0x8C, 0x80, 0xED, 0x95,
        0x9C, 0x20, 0xEC, 0xA1, 0xB4, 0xEC, 0xA4, 0x91, 0xEB, 0x8F, 0xBC, 0xEC, 0x95, 0xBC, 0x20, 0xED,
        0x95, 0x98, 0xEC, 0xA7, 0x80, 0xEB, 0xA7, 0x8C, 0x2C, 0x20, 0xEA, 0xB3, 0xA0, 0xEC, 0x86, 0x8C,
        0xC2, 0xB7, 0xEA, 0xB3, 0xA0, 0xEB, 0xB0, 0x9C, 0xEC, 0x9D, 0xB4, 0x20, 0xEC, 0x9E, 0x88, 0xEB,
        0x8A, 0x94, 0x20, 0xEB, 0xA7, 0x8C, 0xED, 0x81, 0xBC, 0x20, 0xEC, 0x86, 0x8C, 0xEC, 0x86, 0x8D,
        0x20, 0xEC, 0xA0, 0x95, 0xEB, 0x8B, 0xB9, 0xEC, 0x9D, 0xB4, 0xEB, 0x82, 0x98, 0x20, 0xEC, 0xA7,
        0x80, 0xEC, 0x9C, 0x84, 0x20, 0xEA, 0xB3, 0xA0, 0xED, 0x95, 0x98, 0xEB, 0xA5, 0xBC, 0x20, 0xEB,
        0xA7, 0x89, 0xEB, 0xA1, 0xA0, 0xED, 0x95, 0x98, 0xEA, 0xB3, 0xA0, 0x20, 0xEB, 0xB2, 0x95, 0xEA,
        0xB3, 0xBC, 0x20, 0xEC, 0x9B, 0x90, 0xEC, 0xB9, 0x99, 0xEC, 0x97, 0x90, 0x20, 0xEB, 0x94, 0xB0,
        0xEB, 0x9D, 0xBC, 0x20, 0xEC, 0xB2, 0x98, 0xEB, 0xA6, 0xAC, 0xED, 0x95, 0x98, 0xEB, 0x9D, 0xBC,
        0x22, 0xEA, 0xB3, 0xA0, 0x20, 0xEB, 0xA7, 0x90, 0xED, 0x96, 0x88, 0xEB, 0x8B, 0xA4, 0x2E, 0x20,
        0xED, 0x95, 0x9C, 0xED, 0x8E, 0xB8, 0x20, 0xEA, 0xB2, 0xBD, 0xEC, 0xB0, 0xB0, 0xEC, 0x9D, 0x80,
        0x20, 0xEA, 0xB0, 0x95, 0xEA, 0xB8, 0xB0, 0xEA, 0xB0, 0x91, 0x20, 0xEB, 0xAF, 0xBC, 0xEB, 0x85,
        0xB8, 0xEB, 0x8B, 0xB9, 0x20, 0xEB, 0x8C, 0x80, 0xED, 0x91, 0x9C, 0xEC, 0x97, 0x90, 0xEA, 0xB2,
        0x8C, 0x20, 0x31, 0x32, 0xEC, 0x9D, 0xBC, 0x2C, 0x20, 0xEB, 0xAF, 0xBC, 0xEC, 0xA3, 0xBC, 0xEB,
        0x8B, 0xB9, 0x20, 0xEB, 0xAC, 0xB8, 0xED, 0x95, 0x99, 0xEC, 0xA7, 0x84, 0x2C, 0x20, 0xEB, 0xAF,
        0xBC, 0xEB, 0x85, 0xB8, 0xEB, 0x8B, 0xB9, 0x20, 0xEC, 0x9D, 0xB4, 0xEC, 0xA0, 0x95, 0xED, 0x9D,
        0xAC, 0x20, 0xEC, 0x9D, 0x98, 0xEC, 0x9B, 0x90, 0xEC, 0x97, 0x90, 0xEA, 0xB2, 0x8C, 0xEB, 0x8A,
        0x94, 0x20, 0x31, 0x33, 0xEC, 0x9D, 0xBC, 0x20, 0xEA, 0xB2, 0xBD, 0xEC, 0xB0, 0xB0, 0xEC, 0x97,
        0x90, 0x20, 0xEC, 0xB6, 0x9C, 0xEC, 0x84, 0x9D, 0xED, 0x95, 0x98, 0xEB, 0x9D, 0xBC, 0xEB, 0x8A,
        0x94, 0x20, 0xEA, 0xB3, 0xB5, 0xEB, 0xAC, 0xB8, 0xEC, 0x9D, 0x84, 0x20, 0xEA, 0xB0, 0x81, 0xEA,
        0xB0, 0x81, 0x20, 0xEB, 0xB0, 0x9C, 0xEC, 0x86, 0xA1, 0xED, 0x96, 0x88, 0xEB, 0x8B, 0xA4, 0x2E
    });

    EXPECT_THAT(utf8_data, ::testing::ContainerEq(decoded_text));
}
