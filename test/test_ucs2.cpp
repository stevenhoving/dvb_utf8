#include "dvb_utf8.hpp"
#include "helpers.hpp"
#include <gtest/gtest.h>
#include <gmock/gmock.h>
#include <string>

using namespace dvb_utf8;

TEST(test_ucs2, test_ucs2be_decode)
{
    // dvb data stream with encoding identifier token for ucs2be (0x11).
    auto data = std::vector<uint8_t>{ 0x11,
        0x41, 0x00, 0x72, 0x00, 0x61, 0x00, 0x62, 0x00, 0x69, 0x00, 0x63, 0x00,
        0x09, 0x00, 0x09, 0x00, 0x09, 0xFE, 0x8D, 0xFE, 0xDF, 0xFE, 0xB4, 0xFE,
        0xFC, 0xFE, 0xE1, 0x00, 0x20, 0xFE, 0xCB, 0xFE, 0xE0, 0xFE, 0xF4, 0xFE,
        0xDC, 0xFE, 0xE2, 0x00, 0x0A, 0x00
    };

    auto decoded_text = dvb_utf8::decode(stream_span(&data[0], &data.data()[data.size()]));

    auto data_utf8 = to_utf8_string({
        0x41, 0x72, 0x61, 0x62, 0x69, 0x63, 0x09, 0x09, 0x09, 0xEF, 0xBA, 0x8D,
        0xEF, 0xBB, 0x9F, 0xEF, 0xBA, 0xB4, 0xEF, 0xBB, 0xBC, 0xEF, 0xBB, 0xA1,
        0x20, 0xEF, 0xBB, 0x8B, 0xEF, 0xBB, 0xA0, 0xEF, 0xBB, 0xB4, 0xEF, 0xBB,
        0x9C, 0xEF, 0xBB, 0xA2, 0x0D, 0x0A
    });

    EXPECT_THAT(data_utf8, ::testing::ContainerEq(decoded_text));
}

#if DVB_UTF8_ENABLE_ENCODE
TEST(test_ucs2, test_ucs2be_encode_decode)
{
    // dvb data stream with encoding identifier token for ucs2be (0x11).
    auto data = std::vector<uint8_t>{ 0x11,
        0x41, 0x00, 0x72, 0x00, 0x61, 0x00, 0x62, 0x00, 0x69, 0x00, 0x63, 0x00,
        0x09, 0x00, 0x09, 0x00, 0x09, 0xFE, 0x8D, 0xFE, 0xDF, 0xFE, 0xB4, 0xFE,
        0xFC, 0xFE, 0xE1, 0x00, 0x20, 0xFE, 0xCB, 0xFE, 0xE0, 0xFE, 0xF4, 0xFE,
        0xDC, 0xFE, 0xE2, 0x00, 0x0A, 0x00
    };

    auto data_utf8 = to_utf8_string({
        0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x6C, 0x69, 0x73, 0x74, 0x20, 0x6F,
        0x66, 0x20, 0x77, 0x61, 0x79, 0x73, 0x20, 0x74, 0x6F, 0x20, 0x73, 0x61, 0x79, 0x20, 0x68, 0x65,
        0x6C, 0x6C, 0x6F, 0x20, 0x69, 0x6E, 0x20, 0x76, 0x61, 0x72, 0x69, 0x6F, 0x75, 0x73, 0x20, 0x6C,
        0x61, 0x6E, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x2E, 0x0D, 0x0A, 0x49, 0x74, 0x73, 0x20, 0x70,
        0x75, 0x72, 0x70, 0x6F, 0x73, 0x65, 0x20, 0x69, 0x73, 0x20, 0x74, 0x6F, 0x20, 0x69, 0x6C, 0x6C,
        0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72,
        0x20, 0x6F, 0x66, 0x20, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x2E, 0x0D, 0x0A, 0x0D, 0x0A,
        0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D,
        0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D,
        0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D,
        0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x0D, 0x0A, 0x41, 0x6D, 0x68, 0x61, 0x72,
        0x69, 0x63, 0x09, 0x28, 0xE1, 0x8A, 0xA0, 0xE1, 0x88, 0x9B, 0xE1, 0x88, 0xAD, 0xE1, 0x8A, 0x9B,
        0x29, 0x09, 0xE1, 0x88, 0xA0, 0xE1, 0x88, 0x8B, 0xE1, 0x88, 0x9D, 0x0D, 0x0A, 0x41, 0x72, 0x61,
        0x62, 0x69, 0x63, 0x09, 0x09, 0x09, 0xEF, 0xBA, 0x8D, 0xEF, 0xBB, 0x9F, 0xEF, 0xBA, 0xB4, 0xEF,
        0xBB, 0xBC, 0xEF, 0xBB, 0xA1, 0x20, 0xEF, 0xBB, 0x8B, 0xEF, 0xBB, 0xA0, 0xEF, 0xBB, 0xB4, 0xEF,
        0xBB, 0x9C, 0xEF, 0xBB, 0xA2, 0x0D, 0x0A, 0x43, 0x7A, 0x65, 0x63, 0x68, 0x20, 0x28, 0xC4, 0x8D,
        0x65, 0x73, 0x6B, 0x79, 0x29, 0x09, 0x09, 0x44, 0x6F, 0x62, 0x72, 0xC3, 0xBD, 0x20, 0x64, 0x65,
        0x6E, 0x0D, 0x0A, 0x44, 0x61, 0x6E, 0x69, 0x73, 0x68, 0x20, 0x28, 0x44, 0x61, 0x6E, 0x73, 0x6B,
        0x29, 0x09, 0x09, 0x48, 0x65, 0x6A, 0x2C, 0x20, 0x47, 0x6F, 0x64, 0x64, 0x61, 0x67, 0x0D, 0x0A,
        0x45, 0x6E, 0x67, 0x6C, 0x69, 0x73, 0x68, 0x09, 0x09, 0x09, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x0D,
        0x0A, 0x45, 0x73, 0x70, 0x65, 0x72, 0x61, 0x6E, 0x74, 0x6F, 0x09, 0x09, 0x53, 0x61, 0x6C, 0x75,
        0x74, 0x6F, 0x6E, 0x0D, 0x0A, 0x45, 0x73, 0x74, 0x6F, 0x6E, 0x69, 0x61, 0x6E, 0x09, 0x09, 0x54,
        0x65, 0x72, 0x65, 0x2C, 0x20, 0x54, 0x65, 0x72, 0x76, 0x69, 0x73, 0x74, 0x0D, 0x0A, 0x46, 0x4F,
        0x52, 0x54, 0x52, 0x41, 0x4E, 0x09, 0x09, 0x09, 0x50, 0x52, 0x4F, 0x47, 0x52, 0x41, 0x4D, 0x0D,
        0x0A, 0x46, 0x69, 0x6E, 0x6E, 0x69, 0x73, 0x68, 0x20, 0x28, 0x53, 0x75, 0x6F, 0x6D, 0x69, 0x29,
        0x09, 0x09, 0x48, 0x65, 0x69, 0x0D, 0x0A, 0x46, 0x72, 0x65, 0x6E, 0x63, 0x68, 0x20, 0x28, 0x46,
        0x72, 0x61, 0x6E, 0xC3, 0xA7, 0x61, 0x69, 0x73, 0x29, 0x09, 0x42, 0x6F, 0x6E, 0x6A, 0x6F, 0x75,
        0x72, 0x2C, 0x20, 0x53, 0x61, 0x6C, 0x75, 0x74, 0x0D, 0x0A, 0x47, 0x65, 0x72, 0x6D, 0x61, 0x6E,
        0x20, 0x28, 0x44, 0x65, 0x75, 0x74, 0x73, 0x63, 0x68, 0x20, 0x4E, 0x6F, 0x72, 0x64, 0x29, 0x09,
        0x47, 0x75, 0x74, 0x65, 0x6E, 0x20, 0x54, 0x61, 0x67, 0x0D, 0x0A, 0x47, 0x65, 0x72, 0x6D, 0x61,
        0x6E, 0x20, 0x28, 0x44, 0x65, 0x75, 0x74, 0x73, 0x63, 0x68, 0x20, 0x53, 0xC3, 0xBC, 0x64, 0x29,
        0x09, 0x47, 0x72, 0xC3, 0xBC, 0xC3, 0x9F, 0x20, 0x47, 0x6F, 0x74, 0x74, 0x0D, 0x0A, 0x47, 0x72,
        0x65, 0x65, 0x6B, 0x20, 0x28, 0xCE, 0x95, 0xCE, 0xBB, 0xCE, 0xBB, 0xCE, 0xB7, 0xCE, 0xBD, 0xCE,
        0xB9, 0xCE, 0xBA, 0xCE, 0xAC, 0x29, 0x09, 0xCE, 0x93, 0xCE, 0xB5, 0xCE, 0xB9, 0xCE, 0xAC, 0x20,
        0xCF, 0x83, 0xCE, 0xB1, 0xCF, 0x82, 0x0D, 0x0A, 0x48, 0x65, 0x62, 0x72, 0x65, 0x77, 0x09, 0x09,
        0x09, 0xD7, 0xA9, 0xD7, 0x9C, 0xD7, 0x95, 0xD7, 0x9D, 0x0D, 0x0A, 0x49, 0x74, 0x61, 0x6C, 0x69,
        0x61, 0x6E, 0x6F, 0x09, 0x09, 0x43, 0x69, 0x61, 0x6F, 0x2C, 0x20, 0x42, 0x75, 0x6F, 0x6E, 0x20,
        0x67, 0x69, 0x6F, 0x72, 0x6E, 0x6F, 0x0D, 0x0A, 0x4C, 0x61, 0x6F, 0x28, 0xE0, 0xBA, 0x9E, 0xE0,
        0xBA, 0xB2, 0xE0, 0xBA, 0xAA, 0xE0, 0xBA, 0xB2, 0xE0, 0xBA, 0xA5, 0xE0, 0xBA, 0xB2, 0xE0, 0xBA,
        0xA7, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xE0, 0xBA,
        0xAA, 0xE0, 0xBA, 0xB0, 0xE0, 0xBA, 0x9A, 0xE0, 0xBA, 0xB2, 0xE0, 0xBA, 0x8D, 0xE0, 0xBA, 0x94,
        0xE0, 0xBA, 0xB5, 0x2C, 0x20, 0xE0, 0xBA, 0x82, 0xE0, 0xBB, 0x8D, 0xE0, 0xBB, 0x83, 0xE0, 0xBA,
        0xAB, 0xE0, 0xBB, 0x89, 0xE0, 0xBB, 0x82, 0xE0, 0xBA, 0x8A, 0xE0, 0xBA, 0x81, 0xE0, 0xBA, 0x94,
        0xE0, 0xBA, 0xB5, 0x0D, 0x0A, 0x4D, 0x61, 0x6C, 0x74, 0x65, 0x73, 0x65, 0x09, 0x09, 0x09, 0x43,
        0x69, 0x61, 0x6F, 0x0D, 0x0A, 0x4E, 0x65, 0x64, 0x65, 0x72, 0x6C, 0x61, 0x6E, 0x64, 0x73, 0x2C,
        0x20, 0x56, 0x6C, 0x61, 0x61, 0x6D, 0x73, 0x09, 0x48, 0x61, 0x6C, 0x6C, 0x6F, 0x2C, 0x20, 0x44,
        0x61, 0x67, 0x0D, 0x0A, 0x4E, 0x6F, 0x72, 0x77, 0x65, 0x67, 0x69, 0x61, 0x6E, 0x20, 0x28, 0x4E,
        0x6F, 0x72, 0x73, 0x6B, 0x29, 0x09, 0x48, 0x65, 0x69, 0x2C, 0x20, 0x47, 0x6F, 0x64, 0x20, 0x64,
        0x61, 0x67, 0x0D, 0x0A, 0x50, 0x6F, 0x6C, 0x69, 0x73, 0x68, 0x09, 0x09, 0x09, 0x44, 0x7A, 0x69,
        0x65, 0xC5, 0x84, 0x20, 0x64, 0x6F, 0x62, 0x72, 0x79, 0x2C, 0x20, 0x48, 0x65, 0x6A, 0x0D, 0x0A,
        0x52, 0x75, 0x73, 0x73, 0x69, 0x61, 0x6E, 0x20, 0x28, 0xD0, 0xA0, 0xD1, 0x83, 0xD1, 0x81, 0xD1,
        0x81, 0xD0, 0xBA, 0xD0, 0xB8, 0xD0, 0xB9, 0x29, 0x09, 0xD0, 0x97, 0xD0, 0xB4, 0xD1, 0x80, 0xD0,
        0xB0, 0xD0, 0xB2, 0xD1, 0x81, 0xD1, 0x82, 0xD0, 0xB2, 0xD1, 0x83, 0xD0, 0xB9, 0xD1, 0x82, 0xD0,
        0xB5, 0x21, 0x0D, 0x0A, 0x53, 0x6C, 0x6F, 0x76, 0x61, 0x6B, 0x09, 0x09, 0x09, 0x44, 0x6F, 0x62,
        0x72, 0xC3, 0xBD, 0x20, 0x64, 0x65, 0xC5, 0x88, 0x0D, 0x0A, 0x53, 0x70, 0x61, 0x6E, 0x69, 0x73,
        0x68, 0x20, 0x28, 0x45, 0x73, 0x70, 0x61, 0xC3, 0xB1, 0x6F, 0x6C, 0x29, 0x09, 0xC2, 0xA1, 0x48,
        0x6F, 0x6C, 0x61, 0x21, 0x0D, 0x0A, 0x53, 0x77, 0x65, 0x64, 0x69, 0x73, 0x68, 0x20, 0x28, 0x53,
        0x76, 0x65, 0x6E, 0x73, 0x6B, 0x61, 0x29, 0x09, 0x48, 0x65, 0x6A, 0x2C, 0x20, 0x47, 0x6F, 0x64,
        0x64, 0x61, 0x67, 0x0D, 0x0A, 0x54, 0x68, 0x61, 0x69, 0x20, 0x28, 0xE0, 0xB8, 0xA0, 0xE0, 0xB8,
        0xB2, 0xE0, 0xB8, 0xA9, 0xE0, 0xB8, 0xB2, 0xE0, 0xB9, 0x84, 0xE0, 0xB8, 0x97, 0xE0, 0xB8, 0xA2,
        0x29, 0x09, 0x09, 0xE0, 0xB8, 0xAA, 0xE0, 0xB8, 0xA7, 0xE0, 0xB8, 0xB1, 0xE0, 0xB8, 0xAA, 0xE0,
        0xB8, 0x94, 0xE0, 0xB8, 0xB5, 0xE0, 0xB8, 0x84, 0xE0, 0xB8, 0xA3, 0xE0, 0xB8, 0xB1, 0xE0, 0xB8,
        0x9A, 0x2C, 0x20, 0xE0, 0xB8, 0xAA, 0xE0, 0xB8, 0xA7, 0xE0, 0xB8, 0xB1, 0xE0, 0xB8, 0xAA, 0xE0,
        0xB8, 0x94, 0xE0, 0xB8, 0xB5, 0xE0, 0xB8, 0x84, 0xE0, 0xB9, 0x88, 0xE0, 0xB8, 0xB0, 0x0D, 0x0A,
        0x0D, 0x0A, 0x54, 0x69, 0x67, 0x72, 0x69, 0x67, 0x6E, 0x61, 0x20, 0x28, 0xE1, 0x89, 0xB5, 0xE1,
        0x8C, 0x8D, 0xE1, 0x88, 0xAD, 0xE1, 0x8A, 0x9B, 0x29, 0x09, 0xE1, 0x88, 0xB0, 0xE1, 0x88, 0x8B,
        0xE1, 0x88, 0x9B, 0xE1, 0x89, 0xB5, 0x0D, 0x0A, 0x54, 0x75, 0x72, 0x6B, 0x69, 0x73, 0x68, 0x20,
        0x28, 0x54, 0xC3, 0xBC, 0x72, 0x6B, 0xC3, 0xA7, 0x65, 0x29, 0x09, 0x4D, 0x65, 0x72, 0x68, 0x61,
        0x62, 0x61, 0x0D, 0x0A, 0x56, 0x69, 0x65, 0x74, 0x6E, 0x61, 0x6D, 0x65, 0x73, 0x65, 0x20, 0x28,
        0x54, 0x69, 0xE1, 0xBA, 0xBF, 0x6E, 0x67, 0x20, 0x56, 0x69, 0xE1, 0xBB, 0x87, 0x74, 0x29, 0x09,
        0x43, 0x68, 0xC3, 0xA0, 0x6F, 0x20, 0x62, 0xE1, 0xBA, 0xA1, 0x6E, 0x0D, 0x0A, 0x0D, 0x0A, 0x4A,
        0x61, 0x70, 0x61, 0x6E, 0x65, 0x73, 0x65, 0x20, 0x28, 0xE6, 0x97, 0xA5, 0xE6, 0x9C, 0xAC, 0xE8,
        0xAA, 0x9E, 0x29, 0x09, 0x09, 0xE3, 0x81, 0x93, 0xE3, 0x82, 0x93, 0xE3, 0x81, 0xAB, 0xE3, 0x81,
        0xA1, 0xE3, 0x81, 0xAF, 0x2C, 0x20, 0xEF, 0xBD, 0xBA, 0xEF, 0xBE, 0x9D, 0xEF, 0xBE, 0x86, 0xEF,
        0xBE, 0x81, 0xEF, 0xBE, 0x8A, 0x0D, 0x0A, 0x43, 0x68, 0x69, 0x6E, 0x65, 0x73, 0x65, 0x20, 0x28,
        0xE4, 0xB8, 0xAD, 0xE6, 0x96, 0x87, 0x2C, 0xE6, 0x99, 0xAE, 0xE9, 0x80, 0x9A, 0xE8, 0xAF, 0x9D,
        0x2C, 0xE6, 0xB1, 0x89, 0xE8, 0xAF, 0xAD, 0x29, 0x09, 0xE4, 0xBD, 0xA0, 0xE5, 0xA5, 0xBD, 0x0D,
        0x0A, 0x43, 0x61, 0x6E, 0x74, 0x6F, 0x6E, 0x65, 0x73, 0x65, 0x20, 0x28, 0xE7, 0xB2, 0xB5, 0xE8,
        0xAA, 0x9E, 0x2C, 0xE5, 0xBB, 0xA3, 0xE6, 0x9D, 0xB1, 0xE8, 0xA9, 0xB1, 0x29, 0x09, 0x09, 0xE6,
        0x97, 0xA9, 0xE6, 0x99, 0xA8, 0x2C, 0x20, 0xE4, 0xBD, 0xA0, 0xE5, 0xA5, 0xBD, 0x0D, 0x0A, 0x4B,
        0x6F, 0x72, 0x65, 0x61, 0x6E, 0x20, 0x28, 0xED, 0x95, 0x9C, 0xEA, 0xB8, 0x80, 0x29, 0x09, 0x09,
        0x09, 0xEC, 0x95, 0x88, 0xEB, 0x85, 0x95, 0xED, 0x95, 0x98, 0xEC, 0x84, 0xB8, 0xEC, 0x9A, 0x94,
        0x2C, 0x20, 0xEC, 0x95, 0x88, 0xEB, 0x85, 0x95, 0xED, 0x95, 0x98, 0xEC, 0x8B, 0xAD, 0xEB, 0x8B,
        0x88, 0xEA, 0xB9, 0x8C, 0x0D, 0x0A, 0x0D, 0x0A, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6E,
        0x63, 0x65, 0x20, 0x61, 0x6D, 0x6F, 0x6E, 0x67, 0x20, 0x63, 0x68, 0x69, 0x6E, 0x65, 0x73, 0x65,
        0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x20, 0x69, 0x6E, 0x20, 0x47,
        0x42, 0x2C, 0x20, 0x4A, 0x49, 0x53, 0x2C, 0x20, 0x4B, 0x53, 0x43, 0x2C, 0x20, 0x42, 0x49, 0x47,
        0x35, 0x3A, 0x0D, 0x0A, 0x09, 0x47, 0x42, 0x20, 0x20, 0x20, 0x2D, 0x2D, 0x20, 0xE5, 0x85, 0x83,
        0xE6, 0xB0, 0x94, 0x20, 0x20, 0xE5, 0xBC, 0x80, 0xE5, 0x8F, 0x91, 0x0D, 0x0A, 0x09, 0x4A, 0x49,
        0x53, 0x20, 0x20, 0x2D, 0x2D, 0x20, 0xE5, 0x85, 0x83, 0xE6, 0xB0, 0x97, 0x20, 0x20, 0xE9, 0x96,
        0x8B, 0xE7, 0x99, 0xBA, 0x0D, 0x0A, 0x09, 0x4B, 0x53, 0x43, 0x20, 0x20, 0x2D, 0x2D, 0x20, 0xE5,
        0x85, 0x83, 0xE6, 0xB0, 0xA3, 0x20, 0x20, 0xE9, 0x96, 0x8B, 0xE7, 0x99, 0xBC, 0x0D, 0x0A, 0x09,
        0x42, 0x49, 0x47, 0x35, 0x20, 0x2D, 0x2D, 0x20, 0xE5, 0x85, 0x83, 0xE6, 0xB0, 0xA3, 0x20, 0x20,
        0xE9, 0x96, 0x8B, 0xE7, 0x99, 0xBC, 0x0D, 0x0A, 0x0D, 0x0A, 0x4A, 0x75, 0x73, 0x74, 0x20, 0x66,
        0x6F, 0x72, 0x20, 0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x4A, 0x49, 0x53,
        0x58, 0x30, 0x32, 0x31, 0x32, 0x3A, 0x20, 0xE9, 0xA8, 0x8F, 0xE9, 0xA9, 0x8E, 0x20, 0x28, 0x74,
        0x68, 0x65, 0x20, 0x73, 0x65, 0x63, 0x6F, 0x6E, 0x64, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
        0x74, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x6F, 0x66, 0x20, 0x4A, 0x49, 0x53, 0x58, 0x30, 0x32,
        0x31, 0x32, 0x29, 0x0D, 0x0A
    });

    auto decoded_text = dvb_utf8::encode(data_utf8, character_encoding::ucs2be);

    //EXPECT_THAT(data_utf8, ::testing::ContainerEq(decoded_text));

    // always fail, fix this unit test.
    EXPECT_EQ(false, true);
}
#endif // DVB_UTF8_ENABLE_ENCODE
