static const unsigned short iso6937_2uni_page0[128] =
{
  /* 0x80 */
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008a, 0x008b, 0x008c, 0x008d, 0x008e, 0x008f,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009a, 0x009b, 0x009c, 0x009d, 0x009e, 0x009f,
  0x00a0, 0x00a1, 0x00a2, 0x00a3, 0x20ac, 0x00a5, 0x0000, 0x00a7,
  0x00a4, 0x2018, 0x201c, 0x00ab, 0x2190, 0x2191, 0x2192, 0x2193,
  0x00b0, 0x00b1, 0x00b2, 0x00b3, 0x00d7, 0x00b5, 0x00b6, 0x00b7,
  0x00f7, 0x2019, 0x201d, 0x00bb, 0x00bc, 0x00bd, 0x00be, 0x00bf,
  0x0000, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
  0xffff, 0x0000, 0xffff, 0xffff, 0x0000, 0xffff, 0xffff, 0xffff,
  0x2014, 0x00b9, 0x00ae, 0x00a9, 0x2122, 0x266a, 0x00ac, 0x00a6,
  0x0000, 0x0000, 0x0000, 0x0000, 0x215b, 0x215c, 0x215d, 0x215e,
  0x2126, 0x00c6, 0x00d0, 0x00aa, 0x0126, 0x0000, 0x0132, 0x013f,
  0x0141, 0x00d8, 0x0152, 0x00ba, 0x00de, 0x0166, 0x014a, 0x0149,
  0x0138, 0x00e6, 0x0111, 0x00f0, 0x0127, 0x0131, 0x0133, 0x0140,
  0x0142, 0x00f8, 0x0153, 0x00df, 0x00fe, 0x0167, 0x014b, 0x00ad
};

/* The outer array range runs from 0xc1 to 0xcf, the inner range from 0x40
   to 0x7f.  */
static const unsigned short iso6937_2uni_page1[15][64] =
{
  /* 0xc1 */
  {
    /* 0x40 */
    0x0000, 0x00c0, 0x0000, 0x0000, 0x0000, 0x00c8, 0x0000, 0x0000,
    0x0000, 0x00cc, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x00d2,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x00d9, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x00e0, 0x0000, 0x0000, 0x0000, 0x00e8, 0x0000, 0x0000,
    0x0000, 0x00ec, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x00f2,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x00f9, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
  },
  /* 0xc2 */
  {
    /* 0x40 */
    0x0000, 0x00c1, 0x0000, 0x0106, 0x0000, 0x00c9, 0x0000, 0x0000,
    0x0000, 0x00cd, 0x0000, 0x0000, 0x0139, 0x0000, 0x0143, 0x00d3,
    0x0000, 0x0000, 0x0154, 0x015a, 0x0000, 0x00da, 0x0000, 0x0000,
    0x0000, 0x00dd, 0x0179, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x00e1, 0x0000, 0x0107, 0x0000, 0x00e9, 0x0000, 0x0000,
    0x0000, 0x00ed, 0x0000, 0x0000, 0x013a, 0x0000, 0x0144, 0x00f3,
    0x0000, 0x0000, 0x0155, 0x015b, 0x0000, 0x00fa, 0x0000, 0x0000,
    0x0000, 0x00fd, 0x017a, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
  },
  /* 0xc3 */
  {
    /* 0x40 */
    0x0000, 0x00c2, 0x0000, 0x0108, 0x0000, 0x00ca, 0x0000, 0x011c,
    0x0124, 0x00ce, 0x0134, 0x0000, 0x0000, 0x0000, 0x0000, 0x00d4,
    0x0000, 0x0000, 0x0000, 0x015c, 0x0000, 0x00db, 0x0000, 0x0174,
    0x0000, 0x0176, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x00e2, 0x0000, 0x0109, 0x0000, 0x00ea, 0x0000, 0x011d,
    0x0125, 0x00ee, 0x0135, 0x0000, 0x0000, 0x0000, 0x0000, 0x00f4,
    0x0000, 0x0000, 0x0000, 0x015d, 0x0000, 0x00fb, 0x0000, 0x0175,
    0x0000, 0x0177, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
  },
  /* 0xc4 */
  {
    /* 0x40 */
    0x0000, 0x00c3, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0128, 0x0000, 0x0000, 0x0000, 0x0000, 0x00d1, 0x00d5,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0168, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x00e3, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0129, 0x0000, 0x0000, 0x0000, 0x0000, 0x00f1, 0x00f5,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0169, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
  },
  /* 0xc5 */
  {
    /* 0x40 */
    0x0000, 0x0100, 0x0000, 0x0000, 0x0000, 0x0112, 0x0000, 0x0000,
    0x0000, 0x012a, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x014c,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x016a, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0101, 0x0000, 0x0000, 0x0000, 0x0113, 0x0000, 0x0000,
    0x0000, 0x012b, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x014d,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x016b, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
  },
  /* 0xc6 */
  {
    /* 0x40 */
    0x0000, 0x0102, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x011e,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x016c, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0103, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x011f,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x016d, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
  },
  /* 0xc7 */
  {
    /* 0x40 */
    0x0000, 0x0000, 0x0000, 0x010a, 0x0000, 0x0116, 0x0000, 0x0120,
    0x0000, 0x0130, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x017b, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x010b, 0x0000, 0x0117, 0x0000, 0x0121,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x017c, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
  },
  /* 0xc8 */
  {
    /* 0x40 */
    0x0000, 0x00c4, 0x0000, 0x0000, 0x0000, 0x00cb, 0x0000, 0x0000,
    0x0000, 0x00cf, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x00d6,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x00dc, 0x0000, 0x0000,
    0x0000, 0x0178, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x00e4, 0x0000, 0x0000, 0x0000, 0x00eb, 0x0000, 0x0000,
    0x0000, 0x00ef, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x00f6,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x00fc, 0x0000, 0x0000,
    0x0000, 0x00ff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
  },
  /* 0xc9 */
  {
    0x0000,
  },
  /* 0xca */
  {
    /* 0x40 */
    0x0000, 0x00c5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x016e, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x00e5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x016f, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
  },
  /* 0xcb */
  {
    /* 0x40 */
    0x0000, 0x0000, 0x0000, 0x00c7, 0x0000, 0x0000, 0x0000, 0x0122,
    0x0000, 0x0000, 0x0000, 0x0136, 0x013b, 0x0000, 0x0145, 0x0000,
    0x0000, 0x0000, 0x0156, 0x015e, 0x0162, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x00e7, 0x0000, 0x0000, 0x0000, 0x0123,
    0x0000, 0x0000, 0x0000, 0x0137, 0x013c, 0x0000, 0x0146, 0x0000,
    0x0000, 0x0000, 0x0157, 0x015f, 0x0163, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
  },
  /* 0xcc */
  {
    0x0000,
  },
  /* 0xcd */
  {
    /* 0x40 */
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0150,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0170, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0151,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0171, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
  },
  /* 0xce */
  {
    /* 0x40 */
    0x0000, 0x0104, 0x0000, 0x0000, 0x0000, 0x0118, 0x0000, 0x0000,
    0x0000, 0x012e, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0172, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0105, 0x0000, 0x0000, 0x0000, 0x0119, 0x0000, 0x0000,
    0x0000, 0x012f, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0173, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
  },
  /* 0xcf */
  {
    /* 0x40 */
    0x0000, 0x0000, 0x0000, 0x010c, 0x010e, 0x011a, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x013d, 0x0000, 0x0147, 0x0000,
    0x0000, 0x0000, 0x0158, 0x0160, 0x0164, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x017d, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x010d, 0x010f, 0x011b, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x013e, 0x0000, 0x0148, 0x0000,
    0x0000, 0x0000, 0x0159, 0x0161, 0x0165, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x017e, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
  }
};

static int
iso6937_mbtowc(ucs4_t *pwc, const unsigned char *s, size_t n)
{
    unsigned char c1 = *s;
    /* Code set 0 (ASCII) */
    if (c1 < 0x80)
        return ascii_mbtowc(pwc, s, n);

    /* Code set 1 (ISO6937 multi byte) */
    if (c1 >= 0x81 && c1 < 0xff) {
        unsigned short ch = iso6937_2uni_page0[c1 - 0x80];

        if (ch != 0xffff) {
            *pwc = ch;
            return 1;
        }

        /* Code set 2 (ISO6937 composed character 2 byte) */
        if (n < 2)
            return RET_TOOFEW(0);

        unsigned char c2 = s[1];
        if (!(c2 >= 0x40 && c2 < 0x80))
            return EILSEQ; /* invalid combination */

        ch = iso6937_2uni_page1[c1 - 0xc1][c2 - 0x40];
        if (!ch)
            return EILSEQ; /* invalid combination */
        *pwc = ch;
        return 2;
    }

    return RET_ILSEQ;
}

/* \todo */
static int
iso6937_wctomb(unsigned char *r, ucs4_t wc, size_t n)
{
    if (wc < 0x0080) {
        *r = static_cast<unsigned char>(wc);
        return 1;
    }
    printf("iso6937_wctomb, is not implemented completely yet\n");

    return RET_ILUNI;
}

#if 0
static size_t ISO6937toUTF8(const unsigned char **inbuf, size_t *inbytesleft,
    unsigned char **outbuf, size_t *outbytesleft)


{
    if (!inbuf || !(*inbuf))
        return (size_t)(0);    /* Reset state requested */

    const unsigned char *iptr = *inbuf;
    const unsigned char *iend = iptr + *inbytesleft;
    unsigned char *optr = *outbuf;
    unsigned char *oend = optr + *outbytesleft;
    unsigned char ch;
    int err = 0;

    while (iptr < iend)
    {
        if (*iptr < 0x80)
        {
            if (optr >= oend)
            {
                err = E2BIG;
                break;    /* No space in outbuf */
            }
            *optr++ = *iptr++;
            continue;
        }


        if (optr + 2 >= oend)
        {
            err = E2BIG;
            break;        /* No space in outbuf for multibyte char */
        }

        ch = iso6937_2uni_page0[*iptr - 0x80];

        if (ch == 0xffff)
        {
            /* Composed character */
            if (iptr + 1 >= iend)
            {
                err = EINVAL;
                break;    /* No next character */
            }
            if (iptr[1] < 0x40 || iptr[1] >= 0x80 || !(ch = iso6937_2uni_page1[iptr[0] - 0xc1][iptr[1] - 0x40]))
            {
                err = EILSEQ;
                break;   /* Illegal combination */
            }
            iptr += 2;
        }
        else
        {
            if (!ch)
            {
                err = EILSEQ;
                break;
            }
            iptr++;
        }

        // convert unicode to utf8
        if (ch < 0x800)
        {
            optr[1] = 0x80 | (ch & 0x3f);
            optr[0] = 0xc0 | (ch >> 6);
            optr += 2;
        }
        else
        {
            optr[2] = 0x80 | (ch & 0x3f);
            ch >>= 6;
            optr[1] = 0x80 | (ch & 0x3f);
            optr[0] = 0xe0 | (ch >> 6);
            optr += 3;
        }

    }
    *inbuf = iptr;
    *outbuf = optr;
    *inbytesleft = iend - iptr;
    *outbytesleft = oend - optr;

    if (err)
    {
        errno = err;
        return (size_t)(-1);
    }

    return (size_t)(0);
}




// Two Char Mapping (aka ISO6937) ( many polish services and UPC Direct/HBO services)
// get from http://mitglied.lycos.de/buran/charsets/videotex-suppl.html
static inline unsigned int doVideoTexSuppl(int c1, int c2)
{
    switch (c1)
    {
    case 0xC1: // grave
        switch (c2)
        {
        case 0x41: return 0xC0;
        case 0x45: return 0xC8;
        case 0x49: return 0xCC;
        case 0x4f: return 0xD2;
        case 0x55: return 0xD9;
        case 0x61: return 0xE0;
        case 0x65: return 0xE8;
        case 0x69: return 0xEC;
        case 0x6f: return 0xF2;
        case 0x75: return 0xF9;
        default: return 0;
        }
    case 0xC2: // acute
        switch (c2)
        {
        case 0x20: return 0xB4;
        case 0x61: return 225;				case 0x41: return 193;
        case 0x65: return 233;				case 0x45: return 201;
        case 0x69: return 237;				case 0x49: return 205;
        case 0x6f: return 243;				case 0x4f: return 211;
        case 0x75: return 250;				case 0x55: return 218;
        case 0x79: return 253;				case 0x59: return 221;
        case 0x63: return 263;				case 0x43: return 262;
        case 0x6c: return 314;				case 0x4c: return 313;
        case 0x6e: return 324;				case 0x4e: return 323;
        case 0x72: return 341;				case 0x52: return 340;
        case 0x73: return 347;				case 0x53: return 346;
        case 0x7a: return 378;				case 0x5a: return 377;
        default: return 0;
        }
    case 0xC3: // cedilla
        switch (c2)
        {
        case 0x61: return 226;				case 0x41: return 194;
        case 0x65: return 234;				case 0x45: return 202;
        case 0x69: return 238;				case 0x49: return 206;
        case 0x6f: return 244;				case 0x4f: return 212;
        case 0x75: return 251;				case 0x55: return 219;
        case 0x79: return 375;				case 0x59: return 374;
        case 0x63: return 265;				case 0x43: return 264;
        case 0x67: return 285;				case 0x47: return 284;
        case 0x68: return 293;				case 0x48: return 292;
        case 0x6a: return 309;				case 0x4a: return 308;
        case 0x73: return 349;				case 0x53: return 348;
        case 0x77: return 373;				case 0x57: return 372;
        default: return 0;
        }
    case 0xC4: // tilde
        switch (c2)
        {
        case 0x61: return 227;				case 0x41: return 195;
        case 0x6e: return 241;				case 0x4e: return 209;
        case 0x69: return 297;				case 0x49: return 296;
        case 0x6f: return 245;				case 0x4f: return 213;
        case 0x75: return 361;				case 0x55: return 360;
        default: return 0;
        }
    case 0xC5: // macron
        switch (c2)
        {
        case 0x20: return 175;
        case 0x41: return 256;				case 0x61: return 257;
        case 0x45: return 274;				case 0x65: return 275;
        case 0x49: return 298;				case 0x69: return 299;
        case 0x4f: return 332;				case 0x6f: return 333;
        }
    case 0xC6: // breve
        switch (c2)
        {
        case 0x20: return 728;
        case 0x61: return 259;				case 0x41: return 258;
        case 0x67: return 287;				case 0x47: return 286;
        case 0x75: return 365;				case 0x55: return 364;
        default: return 0;
        }
    case 0xC7: // dot above
        switch (c2)
        {
        case 0x20: return 729;
        case 0x63: return 267;				case 0x43: return 266;
        case 0x65: return 279;				case 0x45: return 278;
        case 0x67: return 289;				case 0x47: return 288;
        case 0x5a: return 379;				case 0x49: return 304;
        case 0x7a: return 380;
        default: return 0;
        }
    case 0xC8: // diaeresis
        switch (c2)
        {
        case 0x20: return 168;
        case 0x61: return 228;				case 0x41: return 196;
        case 0x65: return 235;				case 0x45: return 203;
        case 0x69: return 239;				case 0x49: return 207;
        case 0x6f: return 246;				case 0x4f: return 214;
        case 0x75: return 252;				case 0x55: return 220;
        case 0x79: return 255;				case 0x59: return 376;
        default: return 0;
        }
    case 0xCA: // ring above
        switch (c2)
        {
        case 0x20: return 730;
        case 0x61: return 229;				case 0x41: return 197;
        case 0x75: return 367;				case 0x55: return 366;
        default: return 0;
        }
    case 0xCB: // cedilla
        switch (c2)
        {
        case 0x63: return 231;				case 0x43: return 199;
        case 0x67: return 291;				case 0x47: return 290;
        case 0x6b: return 311;				case 0x4b: return 310;
        case 0x6c: return 316;				case 0x4c: return 315;
        case 0x6e: return 326;				case 0x4e: return 325;
        case 0x72: return 343;				case 0x52: return 342;
        case 0x73: return 351;				case 0x53: return 350;
        case 0x74: return 355;				case 0x54: return 354;
        default: return 0;
        }
    case 0xCD: // double acute accent
        switch (c2)
        {
        case 0x20: return 733;
        case 0x6f: return 337;				case 0x4f: return 336;
        case 0x75: return 369;				case 0x55: return 368;
        default: return 0;
        }
    case 0xCE: // ogonek
        switch (c2)
        {
        case 0x20: return 731;
        case 0x61: return 261;				case 0x41: return 260;
        case 0x65: return 281;				case 0x45: return 280;
        case 0x69: return 303;				case 0x49: return 302;
        case 0x75: return 371;				case 0x55: return 370;
        default: return 0;
        }
    case 0xCF: // caron
        switch (c2)
        {
        case 0x20: return 711;
        case 0x63: return 269;				case 0x43: return 268;
        case 0x64: return 271;				case 0x44: return 270;
        case 0x65: return 283;				case 0x45: return 282;
        case 0x6c: return 318;				case 0x4c: return 317;
        case 0x6e: return 328;				case 0x4e: return 327;
        case 0x72: return 345;				case 0x52: return 344;
        case 0x73: return 353;				case 0x53: return 352;
        case 0x74: return 357;				case 0x54: return 356;
        case 0x7a: return 382;				case 0x5a: return 381;
        default: return 0;
        }
    }
    return 0;
}

#endif
